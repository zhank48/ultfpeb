version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ult_mysql_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./database.sql:/docker-entrypoint-initdb.d/database.sql:ro
      - ./mysql-conf:/etc/mysql/conf.d:ro
    networks:
      - ult_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    # Don't expose port 3306 to host in production for security

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ult_backend_prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    volumes:
      - uploads_prod_data:/app/uploads
      - ./logs:/app/logs
    networks:
      - ult_network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Don't expose port directly in production, use reverse proxy

  # Frontend Application with Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ult_frontend_prod
    restart: always
    environment:
      VITE_API_URL: ${VITE_API_URL}
      USE_NGINX: "true"
    ports:
      - "80:80"
      - "443:443"  # For HTTPS
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    networks:
      - ult_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Reverse Proxy (Traefik or Nginx) - Optional
  reverse-proxy:
    image: traefik:v2.10
    container_name: ult_reverse_proxy
    restart: always
    command:
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - ult_network
    profiles:
      - proxy  # Optional service for advanced setups

volumes:
  mysql_prod_data:
    driver: local
  uploads_prod_data:
    driver: local
  letsencrypt_data:
    driver: local

networks:
  ult_network:
    driver: bridge
